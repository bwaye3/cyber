<?php

/**
 * @file
 * Provides custom HTML class settings for field formatters.
 */

use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\Html;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_formatter_class_field_formatter_settings_summary_alter(&$summary, $context) {

  $setting = $context['formatter']->getThirdPartySetting('field_formatter_class', 'class');

  if (!empty($setting)) {
    $summary[] = t('Class: @class', ['@class' => Xss::filter($setting, [])]);
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Adds a 'class' textfield to all formatters.
 */
function field_formatter_class_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $element['class'] = [
    '#type' => 'textfield',
    '#title' => t('Field Formatter Class'),
    '#default_value' => $plugin->getThirdPartySetting('field_formatter_class', 'class'),
  ];
  $element['token_help'] = [
    '#theme' => 'token_tree_link',
    '#token_types' => [$field_definition->getTargetEntityTypeId()],
  ];
  return $element;
}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 *
 * Adds a custom class to the field's class attribute
 * according to the field formatter settings.
 */
function field_formatter_class_preprocess_field(&$variables) {

  // Get a few convenient handles.
  $entity = $variables['element']['#object'];
  $field_name = $variables['element']['#field_name'];
  $view_mode = $variables['element']['#view_mode'];

  // Drill down to field formatter settings.
  $render_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
  $field_display = $render_display->getComponent($field_name);

  // Add class for whole field.
  if (isset($field_display['third_party_settings']['field_formatter_class'])) {
    $class = $field_display['third_party_settings']['field_formatter_class']['class'];
    /** @var \Drupal\Core\Utility\Token $token */
    $token = \Drupal::service('token');
    /** @var \Drupal\Core\Entity\EntityInterface $object */
    $object = $variables['element']['#object'];
    $class = $token->replace($class, [$object->getEntityTypeId() => $object], ['clear' => true]);
    $class = explode(' ', $class);
    foreach ($class as $thisClass) {
      $variables['attributes']['class'][] = Html::escape($thisClass);
    }
  }
}
